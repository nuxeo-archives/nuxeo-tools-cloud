---
- name: Get AWS ID
  debug: msg="{{lookup('env','AWS_ACCESS_KEY_ID')}}"
  no_log: true
  register: aws_id
- name: Get AWS secret
  debug: msg="{{lookup('env','AWS_SECRET_ACCESS_KEY')}}"
  no_log: true
  register: aws_secret
- name: Stop if credentials are missing
  fail: msg="You must have AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your environment"
  when: aws_id.msg == "" or aws_secret.msg == ""

- name: Create user 'ubuntu'
  authorized_key: user=ubuntu key="{{item}}"
  with_file:
  - Jenkins_aws_system.pem.pub
- authorized_key: user=ubuntu key='{{lookup("pipe", "cat /opt/build/hudson/authorized_keys/id_*.pub" )}}'
- name: Create user 'jenkins'
  user: name=jenkins home=/opt/jenkins state=present shell=/bin/bash
- file: path=/opt/jenkins/ state=directory owner=jenkins group=jenkins

- name: Tooling dirs
  file: path=/opt/build state=directory owner=jenkins group=jenkins
- file: path=/opt/build/tools state=directory owner=jenkins group=jenkins
- file: path=/opt/build/hudson state=directory owner=jenkins group=jenkins

- name: Add git-core ppa
  apt_repository: repo='ppa:git-core'
- name: Update apt cache
  apt: update_cache=yes cache_valid_time=7200
- name: Upgrade/install ansible dependencies
  apt: state=latest name={{item}}
  with_items:
  - aptitude
  - python-httplib2
  - apt-transport-https
- name: Update existing packages
  apt: upgrade=full
- name: Upgrade/install build dependencies
  apt: state=latest name={{item}}
  with_items:
  - ntp
  - python-httplib2
  - openjdk-6-jdk
  - openjdk-7-jdk
  - git
  - mercurial
  - subversion
  - chromium-browser
  - ant
  - ant-contrib
  - imagemagick
  - ffmpeg2theora
  - lynx
  - sysstat
  - logtail
  - gawk
  - vim
  - wget
  - curl
  - unzip
  - moreutils
  - ufraw
  - poppler-utils
  - libreoffice
  - libwpd-tools
  - xvfb
  - x11vnc
  - fluxbox
  - linkchecker
  - tree
  - libimage-exiftool-perl
  - libyaml-0-2
  - libyaml-dev
  # Amazon S3
  - s3cmd
  # Funkload requirements
  - python-dev
  - python-setuptools
  - python-webunit
  - python-docutils
  - gnuplot
  - python-reportlab
  - python-pypdf
  - pgfouine
  # Drive requirements
  - python-pip
  - python-qt4
  - libffi-dev
  - python-virtualenv
  # Useful to have
  - python-lxml
  - python-requests
- apt: state=latest name=tcpwatch-httpproxy install_recommends=no
- pip: name=logchart
- pip: name=boto
- shell: easy_install -f http://funkload.nuxeo.org/snapshots/ -U funkload
- alternatives: name=editor path=/usr/bin/vim.basic
- file: src=/usr/lib/jvm/java-1.6.0-openjdk-amd64 path=/usr/lib/jvm/java-6-openjdk state=link
- file: src=/usr/lib/jvm/java-1.7.0-openjdk-amd64 path=/usr/lib/jvm/java-7-openjdk state=link
# Xvfb, x11vnc, fluxbox
- copy: src=xvfb dest=/etc/init.d/xvfb
        mode=755 owner=root group=root
  when: "'docker' not in group_names"
- service: name=xvfb enabled=yes state=started
  when: "'docker' not in group_names"

# FFmpeg build with x264, vpx and AAC support if needed
- name: Check for ffmpeg
  command: dpkg-query -W ffmpeg-nuxeo
  register: ffmpegcheck
  failed_when: ffmpegcheck.rc > 1
  changed_when: false
- name: Get ffmpeg package URL
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_path}}/ffmpeg-nuxeo_2.8.5-1_amd64.deb mode=geturl
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}}
  register: ffmpegurl
  when: ffmpegcheck.rc == 1
- name: Get ffmpeg package
  get_url: url={{ffmpegurl.url}} dest=/tmp/ffmpeg-nuxeo_2.8.5-1_amd64.deb
  when: ffmpegcheck.rc == 1
- name: Install ffmpeg
  command: dpkg -i /tmp/ffmpeg-nuxeo_2.8.5-1_amd64.deb
  when: ffmpegcheck.rc == 1
- file: path=/tmp/ffmpeg-nuxeo_2.8.5-1_amd64.deb state=absent

# Firefox
# Can't use APT which pulls unfixed FF version
- include: firefox.yml
- name: Set Firefox 26 as default
  alternatives: name=firefox link=/usr/bin/firefox path=/opt/build/tools/firefox-26/firefox

# Google Chrome
- name: Check for Google Chrome
  stat: path=/usr/bin/google-chrome
  register: chromeinstalled
- include: google-chrome.yml
  when: not chromeinstalled.stat.exists
  tags: chrome

# Java versions
- include: java6.yml
  tags: java,java6
- include: java8.yml
  tags: java,java8
- name: Set default to Java 8
  alternatives: name=java path=/usr/lib/jvm/java-8/jre/bin/java
  tags: java,java8

# Maven
- include: maven.yml
  tags: maven

# Gradle
- name: Check for gradle
  shell: gradle -v | grep Gradle | head -n 1 | awk '{print $2}'
  register: gradleversion
  failed_when: false
  changed_when: false
  tags: gradle
- include: gradle.yml
  when: gradleversion.rc != 0 or gradleversion.stdout != "1.6"
  tags: gradle

- name: Spot instance Jenkins callback script
# use https://qa.nuxeo.org/jenkins/plugin/ec2/AMI-Scripts/ubuntu-ami-setup.sh once ec2 plugin upgraded
  get_url: url=https://github.com/jenkinsci/ec2-plugin/raw/master/src/main/webapp/AMI-Scripts/ubuntu-init.py
           dest=/usr/bin/userdata mode=0750
  when: "'docker' not in group_names and 'local' not in group_names"
- lineinfile: dest=/etc/rc.local backup=true state=present
              regexp='^python /usr/bin/userdata$' line='python /usr/bin/userdata' insertbefore='^exit 0'
  when: "'docker' not in group_names and 'local' not in group_names"
- lineinfile: dest=/etc/rc.local backup=true state=present
              regexp='^.*use_mnt.sh.*$' line='/opt/jenkins/use_mnt.sh || true' insertbefore='^python /usr/bin/userdata'
  when: "'aws' in group_names"

# NodeJS
- name: Check for nodejs
  command: node -v
  register: nodeversion
  failed_when: false
  changed_when: false
  tags: nodejs
- include: nodejs.yml
  when: nodeversion.rc != 0 or nodeversion.stdout != "v4.4.2"
  tags: nodejs
- name: Install npm 2.15.1
  npm: name=npm version=2.15.1 global=yes
  tags: nodejs
- name: Install node dependencies
  npm: name={{item.name}} version={{item.version}} global=yes
  with_items:
  - name: yo
    version: 1.4.6
  - name: grunt-cli
    version: 0.1.13
  - name: gulp
    version: 3.8.11
  - name: bower
    version: 1.3.12
  tags: nodejs
- name: Add symilnks
  file: src=/opt/build/tools/node-v4.4.2-linux-x64/bin/yo path=/usr/local/bin/yo state=link
- file: src=/opt/build/tools/node-v4.4.2-linux-x64/bin/grunt path=/usr/local/bin/grunt state=link
- file: src=/opt/build/tools/node-v4.4.2-linux-x64/bin/gulp path=/usr/local/bin/gulp state=link
- file: src=/opt/build/tools/node-v4.4.2-linux-x64/bin/bower path=/usr/local/bin/bower state=link

# Dart
- name: Check for dart
  stat: path=/usr/bin/dart
  register: dartinstalled
- include: dart.yml
  when: not dartinstalled.stat.exists
  tags: dart

# MongoDB client
- name: Check for mongo
  shell: mongo --version | awk '{print $NF}' | tr '.' ' ' | awk '{print $1"."$2}'
  register: mongoinstalled
  changed_when: false
  failed_when: mongoinstalled.rc > 1
  tags: mongodb
- include: mongodb.yml
  when: mongoinstalled.stdout != "3.2"
  tags: mongodb

# Redis
- name: Upgrade/install Redis packages
  apt: state=latest name={{item}}
  with_items:
  - redis-server
  - redis-tools
  tags: redis

# Azure CLI
- name: Install Azure CLI
  npm: name=azure-cli version=0.9.10 global=yes
  register: azure_install
- name: Add azure symlink
  file: path=/usr/local/bin/azure src=/opt/build/tools/node-v4.4.2-linux-x64/bin/azure state=link

# slave.jar
- name: Install current slave.jar
  file: path=/opt/jenkins/bin state=directory owner=jenkins group=jenkins
- get_url: url=http://qa.nuxeo.org/jenkins/jnlpJars/slave.jar
           dest=/opt/jenkins/bin/slave.jar
  become_user: jenkins

# Docker environment
- name: Check for custom init system
  stat: path=/etc/my_init.d
  register: myinitd
- name: Install environment setup file
  copy: src=10_setup_environment.sh dest=/etc/my_init.d/10_setup_environment.sh
        mode=0755 owner=root group=root
  when: myinitd.stat.exists
- name: Install slave.jar download script
  copy: src=20_update_slave_jar.sh dest=/etc/my_init.d/20_update_slave_jar.sh
        mode=0755 owner=root group=root
  when: myinitd.stat.exists

# Slave settings
- file: path=/opt/jenkins/.ssh state=directory owner=jenkins group=jenkins mode=700
- authorized_key: user=jenkins key="{{item}}"
  with_file:
  - jenkins_id_rsa.pub
  - Jenkins_aws_system.pem.pub
- authorized_key: user=jenkins key='{{lookup("pipe", "cat /opt/build/hudson/authorized_keys/id_*.pub" )}}'
- copy: src=91-cloudimg-jenkins dest=/etc/sudoers.d/91-cloudimg-jenkins
        mode=440 owner=root group=root
- copy: src=~/.ssh/jenkins_id_rsa dest=/opt/jenkins/.ssh/id_rsa
        owner=jenkins group=jenkins mode=600 backup=no
- copy: src=jenkins_id_rsa.pub dest=/opt/jenkins/.ssh/id_rsa.pub
        owner=jenkins group=jenkins mode=600 backup=no
- copy: src=jenkins_ssh_config dest=/opt/jenkins/.ssh/config
        owner=jenkins group=jenkins mode=600 backup=no
- file: path=/opt/jenkins/.m2 state=directory owner=jenkins group=jenkins
- copy: src={{m2_settings_file}} dest=/opt/jenkins/.m2/settings.xml
        owner=jenkins group=jenkins
- copy: src=/opt/build/m2_repo_seed/ dest=/opt/jenkins/.m2/repo_seed
        owner=jenkins group=jenkins
  when: "'aws' in group_names"
- copy: src=/opt/build/m2_repo_seed/ dest=/opt/jenkins/.m2/repository
        owner=jenkins group=jenkins
  when: "'aws' not in group_names"
- copy: src=/opt/build/hudson/.profile dest=/opt/jenkins/.profile
        owner=jenkins group=jenkins backup=no
- copy: src=/opt/build/hudson/.bashrc dest=/opt/jenkins/.bashrc
        owner=jenkins group=jenkins backup=no
  when: "'aws' in group_names"
- copy: src=/opt/build/hudson/.netrc dest=/opt/jenkins/.netrc
        owner=jenkins group=jenkins mode=600 backup=no
- copy: src=/opt/build/hudson/.s3cfg dest=/opt/jenkins/.s3cfg
        owner=jenkins group=jenkins mode=600 backup=no

- name: Git config
  # should be backup=yes but create=true option is missing on ini_file
  ini_file: dest=/opt/jenkins/.gitconfig state=present backup=no owner=jenkins group=jenkins mode=640
            section=user option=name value="Jenkins Nuxeo"
- ini_file: dest=/opt/jenkins/.gitconfig state=present backup=no owner=jenkins group=jenkins mode=640
            section=user option=email value="jenkins@nuxeo.com"

- copy: src=/opt/build/hudson/gradle.properties dest=/opt/build/hudson/gradle.properties
        owner=jenkins group=jenkins
- copy: src=/opt/build/hudson/instance.clid dest=/opt/build/hudson/instance.clid
        owner=jenkins group=jenkins
- copy: src=use_mnt_ondemand.sh dest=/opt/jenkins/use_mnt.sh
        mode=755 owner=jenkins group=jenkins
  when: "'aws_ondemand' in group_names"

- synchronize: src=/opt/build/keystores dest=/opt/build/ owner=no group=no delete=yes recursive=yes rsync_path="sudo -u jenkins rsync"
  become_user: jenkins
  register: keystore_sync
- shell: chown -R jenkins:jenkins /opt/build/keystores
  when: keystore_sync.changed
- name: Kerberos krb5.conf
  copy: src=/opt/build/keystores/keytabs/krb5.conf dest=/etc/krb5.conf

- name: Setup Azure CLI
  shell: azure account import /opt/build/keystores/azure.nuxeo.com.publishsettings
  become_user: jenkins
  when: azure_install.changed

