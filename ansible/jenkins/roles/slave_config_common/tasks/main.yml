---
- name: Get AWS ID
  debug: msg="{{lookup('env','AWS_ACCESS_KEY_ID')}}"
  no_log: true
  register: aws_id
- name: Get AWS secret
  debug: msg="{{lookup('env','AWS_SECRET_ACCESS_KEY')}}"
  no_log: true
  register: aws_secret
- name: Stop if credentials are missing
  fail: msg="You must have AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your environment"
  when: aws_id.msg == "" or aws_secret.msg == ""

# Slave settings
- name: .ssh dir for ubuntu
  file: path=/home/ubuntu/.ssh state=directory owner=ubuntu group=ubuntu mode=0700
- name: Get authorized_keys for ubuntu
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_config_path}}/jenkins_home/.ssh/authorized_keys dest=/home/ubuntu/.ssh/authorized_keys mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}} overwrite=different
- authorized_key: user=ubuntu key="{{item}}"
  with_file:
  - Jenkins_aws_system.pem.pub

- name: Get jenkins base home from S3
  command: aws s3 sync s3://{{s3_bucket}}/{{s3_config_path}}/jenkins_home/ /opt/jenkins --region={{s3_region}}
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_id.msg}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret.msg}}"
  register: homesync
  changed_when: homesync.stdout != ""
- file: path=/opt/jenkins/.ssh state=directory owner=jenkins group=jenkins mode=700
- file: path=/opt/jenkins/.ssh/id_rsa state=file owner=jenkins group=jenkins mode=0600
- file: path=/opt/jenkins/.ssh/authorized_keys state=file owner=jenkins group=jenkins mode=0600
- file: path=/opt/jenkins/.profile state=file owner=jenkins group=jenkins mode=0600
- file: path=/opt/jenkins/.netrc state=file owner=jenkins group=jenkins mode=0600
- file: path=/opt/jenkins/.s3cfg state=file owner=jenkins group=jenkins mode=0600

- authorized_key: user=jenkins key="{{item}}"
  with_file:
  - jenkins_id_rsa.pub
  - Jenkins_aws_system.pem.pub

- copy: src=91-cloudimg-jenkins dest=/etc/sudoers.d/91-cloudimg-jenkins
        mode=440 owner=root group=root
- copy: src=jenkins_id_rsa.pub dest=/opt/jenkins/.ssh/id_rsa.pub
        owner=jenkins group=jenkins mode=600 backup=no
- copy: src=jenkins_ssh_config dest=/opt/jenkins/.ssh/config
        owner=jenkins group=jenkins mode=600 backup=no
- file: path=/opt/jenkins/.m2 state=directory owner=jenkins group=jenkins
- name: Add m2 repo seed (aws)
  command: aws s3 sync s3://{{s3_bucket}}/ansible/linux/m2_repo_seed/ /opt/jenkins/.m2/repo_seed --region={{s3_region}}
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_id.msg}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret.msg}}"
  register: seedsync
  changed_when: seedsync.stdout != ""
  when: "'aws' in group_names"
- name: Add m2 repo seed (docker)
  command: aws s3 sync s3://{{s3_bucket}}/ansible/linux/m2_repo_seed/ /opt/jenkins/.m2/repository --region={{s3_region}}
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_id.msg}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret.msg}}"
  register: seedsync
  changed_when: seedsync.stdout != ""
  when: "'aws' not in group_names"
- name: Fix .m2 rights
  command: chown -R jenkins:jenkins /opt/jenkins/.m2
  changed_when: false

- name: Git config
  # should be backup=yes but create=true option is missing on ini_file
  ini_file: dest=/opt/jenkins/.gitconfig state=present backup=no owner=jenkins group=jenkins mode=640
            section=user option=name value="Jenkins Nuxeo"
- ini_file: dest=/opt/jenkins/.gitconfig state=present backup=no owner=jenkins group=jenkins mode=640
            section=user option=email value="jenkins@nuxeo.com"
#- name: Add git-lfs
#  command: git lfs install
#  become_user: jenkins
#  changed_when: false

- name: gradle.properties
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_config_path}}/gradle.properties dest=/opt/build/hudson/gradle.properties mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}} overwrite=different
- name: instance.clid
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_config_path}}/instance.clid dest=/opt/build/hudson/instance.clid mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}} overwrite=different
- copy: src=use_mnt_ondemand.sh dest=/opt/jenkins/use_mnt.sh
        mode=755 owner=jenkins group=jenkins
  when: "'aws_ondemand' in group_names"

- name: Keystores
  command: aws s3 sync s3://{{s3_bucket}}/{{s3_config_path}}/keystores/ /opt/build/keystores --region={{s3_region}}
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_id.msg}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret.msg}}"
  register: keystore_sync
  changed_when: keystore_sync.stdout != ""
- shell: chown -R jenkins:jenkins /opt/build/keystores
  when: keystore_sync.changed
- name: Kerberos krb5.conf
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_config_path}}/keystores/keytabs/krb5.conf dest=/etc/krb5.conf mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}} overwrite=different

- name: Setup Azure CLI
  shell: azure account import /opt/build/keystores/azure.nuxeo.com.publishsettings
  become_user: jenkins
  when: azure_install.changed

- name: Add jenkins to docker group
  user: name=jenkins groups=docker append=yes

- name: Start PostgreSQL
  shell: sv up postgresql
  changed_when: false
- name: Add nxadmin user
  script: create_pg_user.sh
  changed_when: false
- name: Stop PostgreSQL
  shell: sv down postgresql
  changed_when: false

